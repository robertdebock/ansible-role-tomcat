---

- name: instance | Ensure instance group exists
  ansible.builtin.group:
    name: "{{ instance.group | default(tomcat_group) }}"
    state: present

- name: instance | Ensure instance user exists
  ansible.builtin.user:
    name: "{{ instance.user | default(tomcat_user) }}"
    state: present
    group: "{{ instance.group | default(tomcat_group) }}"
    createhome: false
    system: true

- name: instance | Ensure instance directory exists
  ansible.builtin.file:
    path: "{{ tomcat_directory }}/{{ instance.name }}"
    state: directory
    owner: "{{ instance.user | default(tomcat_user) }}"
    group: "{{ instance.group | default(tomcat_group) }}"
    mode: "0755"

- name: instance | Download tomcat source
  ansible.builtin.get_url:
    url: "{{ tomcat_unarchive_url }}"
    dest: "{{ tomcat_directory }}/{{ instance.name }}/tomcat_src.tar.gz"
    mode: "440"

- name: instance | Install tomcat instance
  ansible.builtin.unarchive:
    src: "{{ tomcat_directory }}/{{ instance.name }}/tomcat_src.tar.gz"
    dest: "{{ tomcat_directory }}/{{ instance.name }}"
    owner: "{{ instance.user | default(tomcat_user) }}"
    group: "{{ instance.group | default(tomcat_group) }}"
    remote_src: true
    extra_opts: "--strip-components=1"
    creates: "{{ tomcat_directory }}/{{ instance.name }}/bin"
    mode: "0755"

- name: instance | Save instance name
  ansible.builtin.set_fact:
    instance_name: "{{ instance.name }}"

- name: instance | Configure tomcat instance - server.xml
  ansible.builtin.template:
    src: server.xml.j2
    dest: "{{ tomcat_directory }}/{{ instance.name }}/conf/server.xml"
    mode: "0644"
  notify:
    - Restart tomcat instance

- name: instance | Configure tomcat instance - setenv.sh
  ansible.builtin.template:
    src: setenv.sh.j2
    dest: "{{ tomcat_directory }}/{{ instance.name }}/bin/setenv.sh"
    mode: "0644"
  when:
    - instance.java_opts is defined or
      instance.xms is defined or
      instance.xmx is defined
  notify:
    - Restart tomcat instance

- name: instance | Place neutral default page
  ansible.builtin.copy:
    content: "Please select an application by adding the context to the URL."
    dest: "{{ tomcat_directory }}/{{ instance.name }}/webapps/ROOT/index.html"
    owner: "{{ instance.user | default(tomcat_user) }}"
    group: "{{ instance.group | default(tomcat_group) }}"
    mode: "0640"

- name: instance | Place context.xml
  ansible.builtin.copy:
    content: "{{ instance.context }}"
    dest: "{{ tomcat_directory }}/{{ instance.name }}/conf/context.xml"
    mode: "0640"
    owner: "{{ instance.user | default(tomcat_user) }}"
    group: "{{ instance.group | default(tomcat_group) }}"
  when:
    - instance.context is defined

- name: instance | Loop over config_files
  ansible.builtin.include_tasks:
    file: config_file.yml
  loop: "{{ instance.config_files }}"
  loop_control:
    loop_var: config_file
  when:
    - instance.config_files is defined

- name: instance | Create service instance
  ansible.builtin.import_role:
    name: robertdebock.service
  vars:
    service_list:
      - name: "{{ instance.name | default(tomcat_name) }}"
        description: "{{ instance.name | default(tomcat_name) }}"
        start_command: "/bin/bash {{ tomcat_directory }}/{{ instance.name | default(tomcat_directory) }}/bin/catalina.sh run"
        user_name: "{{ instance.user | default(tomcat_user) }}"
        group_name: "{{ instance.group | default(tomcat_group) }}"

- name: instance | Manage tomcat service
  ansible.builtin.service:
    name: "{{ instance.name }}"
    state: "{{ instance.service_state | default(tomcat_service_state) }}"
    enabled: "{{ instance.service_enabled | default(tomcat_service_enabled) }}"

- name: instance | Loop over wars
  ansible.builtin.include_tasks:
    file: war.yml
  loop: "{{ instance.wars }}"
  loop_control:
    loop_var: war
  when:
    - instance.wars is defined

- name: instance | Loop over libs
  ansible.builtin.include_tasks:
    file: lib.yml
  loop: "{{ instance.libs }}"
  loop_control:
    loop_var: lib
  when:
    - instance.libs is defined
