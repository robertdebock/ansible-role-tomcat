---
- name: ensure instance group exists
  group:
    name: "{{ instance.group | default(tomcat_group) }}"
    state: present

- name: ensure instance user exists
  user:
    name: "{{ instance.user | default(tomcat_user) }}"
    state: present
    group: "{{ instance.group | default(tomcat_group) }}"
    createhome: no
    system: yes

- name: ensure instance directory exists
  file:
    path: "{{ tomcat_directory }}/{{ instance.name }}"
    state: directory
    owner: "{{ instance.user | default(tomcat_user) }}"
    group: "{{ instance.group | default(tomcat_group) }}"

- name: download tomcat source
  get_url:
    url: "{{ tomcat_unarchive_url }}"
    dest: "{{ tomcat_directory }}/{{ instance.name }}/tomcat_src.tar.gz"
    mode: 0440
    validate_certs: "{{ tomcat_validate_certs }}"

- name: install tomcat instance
  unarchive:
    src: "{{ tomcat_directory }}/{{ instance.name }}/tomcat_src.tar.gz"
    dest: "{{ tomcat_directory }}/{{ instance.name }}"
    owner: "{{ instance.user | default(tomcat_user) }}"
    group: "{{ instance.group | default(tomcat_group) }}"
    remote_src: yes
    extra_opts: "--strip-components=1"
    creates: "{{ tomcat_directory }}/{{ instance.name }}/bin"
    validate_certs: "{{ tomcat_validate_certs }}"
  register: install_tomcat
  until: install_tomcat is succeeded
  retries: 3

- name: save instance name
  set_fact:
    instance_name: "{{ instance.name }}"

- name: configure tomcat instance - server.xml
  template:
    src: server.xml.j2
    dest: "{{ tomcat_directory }}/{{ instance.name }}/conf/server.xml"
  notify:
    - restart tomcat instance

- name: configure tomcat instance - setenv.sh
  template:
    src: setenv.sh.j2
    dest: "{{ tomcat_directory }}/{{ instance.name }}/bin/setenv.sh"
  when:
    - instance.java_opts is defined
  notify:
    - restart tomcat instance

- name: create service instance
  import_role:
    name: robertdebock.service
  vars:
    service_list:
      - name: "{{ instance.name | default(tomcat_name) }}"
        description: "{{ instance.name | default(tomcat_name) }}"
        start_command: "{{ tomcat_directory }}/{{ instance.name | default(tomcat_directory) }}/bin/catalina.sh run"
        user_name: "{{ instance.user | default(tomcat_user) }}"
        group_name: "{{ instance.group | default(tomcat_group) }}"

- name: start and enable tomcat instance
  service:
    name: "{{ instance.name }}"
    state: started
    enabled: yes
  when:
    - ansible_virtualization_type != "docker"

- name: loop over wars
  include: war.yml
  with_items: "{{ instance.wars }}"
  loop_control:
    loop_var: war
  when:
    - instance.wars is defined

- name: loop over libs
  include: lib.yml
  with_items: "{{ instance.libs }}"
  loop_control:
    loop_var: lib
  when:
    - instance.libs is defined
