---
- name: ensure instance group exists
  group:
    name: "{{ instance.group | default(tomcat_group) }}"
    state: present

- name: ensure instance user exists
  user:
    name: "{{ instance.user | default(tomcat_user) }}"
    state: present
    group: "{{ instance.group | default(tomcat_group) }}"
    createhome: no
    system: yes

- name: ensure instance directory exists
  file:
    path: "{{ tomcat_directory }}/{{ instance.name }}"
    state: directory
    owner: "{{ instance.user | default(tomcat_user) }}"
    group: "{{ instance.group | default(tomcat_group) }}"

- name: install tomcat instance
  unarchive:
    src: "{{ tomcat_mirror }}/{{ tomcat_archives[instance.version | default(tomcat_version)]['url_path'] }}/{{ tomcat_archives[instance.version | default(tomcat_version)]['targz'] }}"
    dest: "{{ tomcat_directory }}/{{ instance.name }}"
    owner: "{{ instance.user | default(tomcat_user) }}"
    group: "{{ instance.group | default(tomcat_group) }}"
    remote_src: yes
    extra_opts: "--strip-components=1"
    creates: "{{ tomcat_directory }}/{{ instance.name }}/bin"
  register: install_tomcat
  until: install_tomcat is succeeded
  retries: 3

- name: configure tomcat instance
  template:
    src: server.xml.j2
    dest: "{{ tomcat_directory }}/{{ instance.name }}"

- name: register tomcat instance to sysvinit
  template:
    src: tomcat.j2
    dest: "/etc/init.d/{{ instance.name }}"
    mode: "0750"
  when:
    - ansible_service_mgr == "sysvinit"
      or ansible_service_mgr == "upstart"

- name: register tomcat instance to systemd
  template:
    src: tomcat.service.j2
    dest: "/etc/systemd/system/{{ instance.name }}.service"
    mode: "0755"
  when:
    - ansible_service_mgr == "systemd"
  notify:
    - systemctl daemon-reload

- name: flush handlers
  meta: flush_handlers

- name: start and enable tomcat instance
  service:
    name: "{{ instance.name }}"
    state: started
    enabled: yes
  when:
    - ansible_virtualization_type != "docker" or tomcat_ignore_docker

- name: loop over wars
  include: war.yml
  with_items: "{{ instance.wars }}"
  loop_control:
    loop_var: war
  when:
    - instance.wars is defined
