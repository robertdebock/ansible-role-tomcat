---
- name: ensure instance group exists
  ansible.builtin.group:
    name: "{{ instance.group | default(tomcat_group) }}"
    state: present

- name: ensure instance user exists
  ansible.builtin.user:
    name: "{{ instance.user | default(tomcat_user) }}"
    state: present
    group: "{{ instance.group | default(tomcat_group) }}"
    createhome: no
    system: yes

- name: ensure instance directory exists
  ansible.builtin.file:
    path: "{{ tomcat_directory }}/{{ instance.name }}"
    state: directory
    owner: "{{ instance.user | default(tomcat_user) }}"
    group: "{{ instance.group | default(tomcat_group) }}"
    mode: "0755"

- name: check if sha512 files exists fromk previous run
  ansible.builtin.stat:
    path: "{{ tomcat_directory }}/tomcat_src.tar.gz.sha512"
  register: sha512file

- name: load sha512 data
  ansible.builtin.slurp:
    src: "{{ tomcat_directory }}/tomcat_src.tar.gz.sha512"
  register: slurped_sha512hash
  when: sha512file.stat.exists

- name: store old sha512 as variable
  ansible.builtin.set_fact:
    tomcat_existing_sha512: "{{ slurped_sha512hash.content | b64decode }}"
  when: slurped_sha512hash.content is defined

- name: install / update tomcat instance
  vars:
    tomcat_download_sha512: "{{ lookup('url', '{{ tomcat_unarchive_url }}.sha512') }}"
  block:
    - name: remove old tomcat files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "{{ tomcat_directory }}/bin"
        - "{{ tomcat_directory }}/tomcat_src.tar.gz"
        - "{{ tomcat_directory }}/tomcat_src.tar.gz.sha512"

    - name: download tomcat source
      ansible.builtin.get_url:
        url: "{{ tomcat_unarchive_url }}"
        dest: "{{ tomcat_directory }}/tomcat_src.tar.gz"
        checksum: "sha512:{{ tomcat_unarchive_url }}.sha512"
        mode: "440"

    - name: download sha512 of tomcat source
      ansible.builtin.get_url:
        url: "{{ tomcat_unarchive_url }}.sha512"
        dest: "{{ tomcat_directory }}/tomcat_src.tar.gz.sha512"
        mode: "440"

    - name: install tomcat instance
      ansible.builtin.unarchive:
        src: "{{ tomcat_directory }}/{{ instance.name }}/tomcat_src.tar.gz"
        dest: "{{ tomcat_directory }}/{{ instance.name }}"
        owner: "{{ instance.user | default(tomcat_user) }}"
        group: "{{ instance.group | default(tomcat_group) }}"
        remote_src: yes
        extra_opts: "--strip-components=1"
        creates: "{{ tomcat_directory }}/{{ instance.name }}/bin"
        mode: "0755"
  when: not tomcat_existing_sha512 is defined or tomcat_existing_sha512 != tomcat_download_sha512

- name: save instance name
  ansible.builtin.set_fact:
    instance_name: "{{ instance.name }}"

- name: configure tomcat instance - server.xml
  ansible.builtin.template:
    src: server.xml.j2
    dest: "{{ tomcat_directory }}/{{ instance.name }}/conf/server.xml"
    mode: "0644"
  notify:
    - restart tomcat instance

- name: configure tomcat instance - setenv.sh
  ansible.builtin.template:
    src: setenv.sh.j2
    dest: "{{ tomcat_directory }}/{{ instance.name }}/bin/setenv.sh"
    mode: "0644"
  when:
    - (instance.java_opts is defined) or (instance.xms is defined) or (instance.xmx is defined)
  notify:
    - restart tomcat instance

- name: place neutral default page
  ansible.builtin.copy:
    content: "Please select an application by adding the context to the URL."
    dest: "{{ tomcat_directory }}/{{ instance.name }}/webapps/ROOT/index.html"
    owner: "{{ instance.user | default(tomcat_user) }}"
    group: "{{ instance.group | default(tomcat_group) }}"
    mode: "0640"

- name: loop over config_files
  ansible.builtin.include_tasks:
    file: config_file.yml
  loop: "{{ instance.config_files }}"
  loop_control:
    loop_var: config_file
  when: instance.config_files is defined

- name: create service instance
  ansible.builtin.import_role:
    name: robertdebock.service
  vars:
    service_list:
      - name: "{{ instance.name | default(tomcat_name) }}"
        description: "{{ instance.name | default(tomcat_name) }}"
        start_command: "/bin/bash {{ tomcat_directory }}/{{ instance.name | default(tomcat_directory) }}/bin/catalina.sh run"
        user_name: "{{ instance.user | default(tomcat_user) }}"
        group_name: "{{ instance.group | default(tomcat_group) }}"

- name: manage tomcat service
  ansible.builtin.service:
    name: "{{ instance.name }}"
    state: "{{ instance.service_state | default(tomcat_service_state) }}"
    enabled: "{{ instance.service_enabled | default(tomcat_service_enabled) }}"

- name: loop over wars
  ansible.builtin.include_tasks:
    file: war.yml
  loop: "{{ instance.wars }}"
  loop_control:
    loop_var: war
  when:
    - instance.wars is defined

- name: loop over libs
  ansible.builtin.include_tasks:
    file: lib.yml
  loop: "{{ instance.libs }}"
  loop_control:
    loop_var: lib
  when:
    - instance.libs is defined
